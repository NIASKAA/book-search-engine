{"ast":null,"code":"var _jsxFileName = \"/Users/niaska/Documents/RICEHW/book-search-engine/client/src/Pages/SavedBooks/SavedBooks.js\";\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutations } from '@apollo/client';\nimport Auth from '../../utils/auth';\nimport { removeBookId } from '../../utils/localStorage';\nimport { Get_Me } from '../../utils/queries';\nimport { Remove_Books } from '../../utils/mutations';\n\nconst SavedBooks = () => {\n  const {\n    loading,\n    data\n  } = useQuery(Get_Me);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || {};\n  const [removeBook, {\n    error\n  }] = useMutations(Remove_Books); // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeBook({\n        variables: {\n          bookId\n        }\n      }); // upon success, remove book's id from localStorage\n\n      removeBookId(bookId);\n    } catch (error) {\n      console.error(error);\n    }\n  }; // if data isn't here yet, say so\n\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, \"LOADING...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Viewing saved books!\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.map(book => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: book.bookId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, book.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: book.image,\n      alt: `The cover for ${book.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 31\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    }, book.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    }, \"Authors: \", book.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }\n    }, book.description), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteBook(book.bookId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }\n    }, \"Delete this Book!\")));\n  }))));\n};\n\nexport default SavedBooks;","map":{"version":3,"sources":["/Users/niaska/Documents/RICEHW/book-search-engine/client/src/Pages/SavedBooks/SavedBooks.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","useQuery","useMutations","Auth","removeBookId","Get_Me","Remove_Books","SavedBooks","loading","data","userData","me","removeBook","error","handleDeleteBook","bookId","token","loggedIn","getToken","variables","console","savedBooks","length","map","book","image","title","authors","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport {useQuery, useMutations} from '@apollo/client'\nimport Auth from '../../utils/auth';\nimport { removeBookId } from '../../utils/localStorage';\nimport {Get_Me} from '../../utils/queries'\nimport {Remove_Books} from '../../utils/mutations'\n\nconst SavedBooks = () => {\n  const {loading, data} = useQuery(Get_Me)\n  const userData = data?.me || {}\n  const [removeBook, {error}] = useMutations(Remove_Books)\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeBook({\n        variables: {bookId}\n      })\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}